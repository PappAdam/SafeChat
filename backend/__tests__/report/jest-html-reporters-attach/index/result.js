window.jest_html_reporters_callback__({"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":4,"numPassedTests":22,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":4,"numTotalTests":22,"startTime":1740056270311,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":8,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740056274048,"runtime":3390,"slow":false,"start":1740056270658},"testFilePath":"D:\\SafeChat\\backend\\__tests__\\db\\user.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["createUser(username: string, password: string): Promise<User | null>"],"duration":10,"failureMessages":[],"fullName":"createUser(username: string, password: string): Promise<User | null> should create a User successfully","status":"passed","title":"should create a User successfully"},{"ancestorTitles":["createUser(username: string, password: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"createUser(username: string, password: string): Promise<User | null> should return null if username is empty","status":"passed","title":"should return null if username is empty"},{"ancestorTitles":["createUser(username: string, password: string): Promise<User | null>"],"duration":0,"failureMessages":[],"fullName":"createUser(username: string, password: string): Promise<User | null> should return null if password is empty","status":"passed","title":"should return null if password is empty"},{"ancestorTitles":["createUser(username: string, password: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"createUser(username: string, password: string): Promise<User | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"},{"ancestorTitles":["findUserByName(username: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"findUserByName(username: string): Promise<User | null> should return a User successfully","status":"passed","title":"should return a User successfully"},{"ancestorTitles":["findUserByName(username: string): Promise<User | null>"],"duration":0,"failureMessages":[],"fullName":"findUserByName(username: string): Promise<User | null> should return null if username is empty","status":"passed","title":"should return null if username is empty"},{"ancestorTitles":["findUserByName(username: string): Promise<User | null>"],"duration":0,"failureMessages":[],"fullName":"findUserByName(username: string): Promise<User | null> should return null if user does not exist","status":"passed","title":"should return null if user does not exist"},{"ancestorTitles":["findUserByName(username: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"findUserByName(username: string): Promise<User | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"}]},{"numFailingTests":0,"numPassingTests":4,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740056274058,"runtime":3417,"slow":false,"start":1740056270641},"testFilePath":"D:\\SafeChat\\backend\\__tests__\\db\\chat.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["createChat(name: string, userIds: string[]): Promise<Chat | null>"],"duration":12,"failureMessages":[],"fullName":"createChat(name: string, userIds: string[]): Promise<Chat | null> should create a Chat successfully","status":"passed","title":"should create a Chat successfully"},{"ancestorTitles":["createChat(name: string, userIds: string[]): Promise<Chat | null>"],"duration":1,"failureMessages":[],"fullName":"createChat(name: string, userIds: string[]): Promise<Chat | null> should return null if name is empty","status":"passed","title":"should return null if name is empty"},{"ancestorTitles":["createChat(name: string, userIds: string[]): Promise<Chat | null>"],"duration":4,"failureMessages":[],"fullName":"createChat(name: string, userIds: string[]): Promise<Chat | null> should return null if userIds is empty","status":"passed","title":"should return null if userIds is empty"},{"ancestorTitles":["createChat(name: string, userIds: string[]): Promise<Chat | null>"],"duration":2,"failureMessages":[],"fullName":"createChat(name: string, userIds: string[]): Promise<Chat | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"}]},{"numFailingTests":0,"numPassingTests":5,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740056274098,"runtime":3441,"slow":false,"start":1740056270657},"testFilePath":"D:\\SafeChat\\backend\\__tests__\\db\\message.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":32,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should create a Message successfully","status":"passed","title":"should create a Message successfully"},{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":0,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should return null if chatId is empty","status":"passed","title":"should return null if chatId is empty"},{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":0,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should return null if userId is empty","status":"passed","title":"should return null if userId is empty"},{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":1,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should return null if content is empty","status":"passed","title":"should return null if content is empty"},{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":1,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"}]},{"numFailingTests":0,"numPassingTests":5,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740056274164,"runtime":83,"slow":false,"start":1740056274081},"testFilePath":"D:\\SafeChat\\backend\\__tests__\\db\\chatMember.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["addUserToChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":2,"failureMessages":[],"fullName":"addUserToChat(userId: string, chatId: string): Promise<ChatMember | null> should create a ChatMember successfully","status":"passed","title":"should create a ChatMember successfully"},{"ancestorTitles":["addUserToChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"addUserToChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if ChatMember already exists","status":"passed","title":"should return null if ChatMember already exists"},{"ancestorTitles":["addUserToChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":0,"failureMessages":[],"fullName":"addUserToChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if userId is empty","status":"passed","title":"should return null if userId is empty"},{"ancestorTitles":["addUserToChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"addUserToChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if chatId is empty","status":"passed","title":"should return null if chatId is empty"},{"ancestorTitles":["addUserToChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":2,"failureMessages":[],"fullName":"addUserToChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":[],"coverageDirectory":"D:\\SafeChat\\backend\\coverage","coverageProvider":"babel","coverageReporters":["json","text","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":3,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["D:\\SafeChat\\backend\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"./__tests__/report","filename":"index.html"}]],"rootDir":"D:\\SafeChat\\backend","runTestsByPath":false,"seed":-967329645,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"","testSequencer":"D:\\SafeChat\\backend\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"verbose":true,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1740056274224,"_reporterOptions":{"publicPath":"./__tests__/report","filename":"index.html","expand":false,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})