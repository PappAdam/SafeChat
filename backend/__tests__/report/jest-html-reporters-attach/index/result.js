window.jest_html_reporters_callback__({"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":6,"numPassedTests":65,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":6,"numTotalTests":65,"startTime":1740351699909,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":8,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740351706199,"runtime":5737,"slow":true,"start":1740351700462},"testFilePath":"C:\\Users\\gergo\\Downloads\\SafeChat\\backend\\__tests__\\db\\chat.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["findChatById(chatId: string): Promise<Chat | null>"],"duration":18,"failureMessages":[],"fullName":"findChatById(chatId: string): Promise<Chat | null> should return a Chat successfully","status":"passed","title":"should return a Chat successfully"},{"ancestorTitles":["findChatById(chatId: string): Promise<Chat | null>"],"duration":2,"failureMessages":[],"fullName":"findChatById(chatId: string): Promise<Chat | null> should return null if id is empty","status":"passed","title":"should return null if id is empty"},{"ancestorTitles":["findChatById(chatId: string): Promise<Chat | null>"],"duration":1,"failureMessages":[],"fullName":"findChatById(chatId: string): Promise<Chat | null> should return null if chat does not exist","status":"passed","title":"should return null if chat does not exist"},{"ancestorTitles":["findChatById(chatId: string): Promise<Chat | null>"],"duration":1,"failureMessages":[],"fullName":"findChatById(chatId: string): Promise<Chat | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"},{"ancestorTitles":["createChat(name: string, userIds: string[]): Promise<Chat | null>"],"duration":2,"failureMessages":[],"fullName":"createChat(name: string, userIds: string[]): Promise<Chat | null> should create a Chat successfully","status":"passed","title":"should create a Chat successfully"},{"ancestorTitles":["createChat(name: string, userIds: string[]): Promise<Chat | null>"],"duration":1,"failureMessages":[],"fullName":"createChat(name: string, userIds: string[]): Promise<Chat | null> should return null if name is empty","status":"passed","title":"should return null if name is empty"},{"ancestorTitles":["createChat(name: string, userIds: string[]): Promise<Chat | null>"],"duration":1,"failureMessages":[],"fullName":"createChat(name: string, userIds: string[]): Promise<Chat | null> should return null if userIds is empty","status":"passed","title":"should return null if userIds is empty"},{"ancestorTitles":["createChat(name: string, userIds: string[]): Promise<Chat | null>"],"duration":1,"failureMessages":[],"fullName":"createChat(name: string, userIds: string[]): Promise<Chat | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"}]},{"numFailingTests":0,"numPassingTests":22,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740351706213,"runtime":5726,"slow":true,"start":1740351700487},"testFilePath":"C:\\Users\\gergo\\Downloads\\SafeChat\\backend\\__tests__\\db\\chatMember.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["addUserToChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":17,"failureMessages":[],"fullName":"addUserToChat(userId: string, chatId: string): Promise<ChatMember | null> should create a ChatMember successfully","status":"passed","title":"should create a ChatMember successfully"},{"ancestorTitles":["addUserToChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"addUserToChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if userId is empty","status":"passed","title":"should return null if userId is empty"},{"ancestorTitles":["addUserToChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"addUserToChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if chatId is empty","status":"passed","title":"should return null if chatId is empty"},{"ancestorTitles":["addUserToChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":2,"failureMessages":[],"fullName":"addUserToChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"},{"ancestorTitles":["removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":2,"failureMessages":[],"fullName":"removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null> should remove a ChatMember successfully","status":"passed","title":"should remove a ChatMember successfully"},{"ancestorTitles":["removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if user is not a member of the chat","status":"passed","title":"should return null if user is not a member of the chat"},{"ancestorTitles":["removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if userId is empty","status":"passed","title":"should return null if userId is empty"},{"ancestorTitles":["removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if chatId is empty","status":"passed","title":"should return null if chatId is empty"},{"ancestorTitles":["removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":3,"failureMessages":[],"fullName":"removeUserFromChat(userId: string, chatId: string): Promise<ChatMember | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"},{"ancestorTitles":["getChatMembersByUser(userId: string): Promise<ChatMember[]>"],"duration":2,"failureMessages":[],"fullName":"getChatMembersByUser(userId: string): Promise<ChatMember[]> should return a ChatMember successfully","status":"passed","title":"should return a ChatMember successfully"},{"ancestorTitles":["getChatMembersByUser(userId: string): Promise<ChatMember[]>"],"duration":1,"failureMessages":[],"fullName":"getChatMembersByUser(userId: string): Promise<ChatMember[]> should return empty array if no ChatMember exists","status":"passed","title":"should return empty array if no ChatMember exists"},{"ancestorTitles":["getChatMembersByUser(userId: string): Promise<ChatMember[]>"],"duration":0,"failureMessages":[],"fullName":"getChatMembersByUser(userId: string): Promise<ChatMember[]> should return empty array if userId is empty","status":"passed","title":"should return empty array if userId is empty"},{"ancestorTitles":["getChatMembersByUser(userId: string): Promise<ChatMember[]>"],"duration":1,"failureMessages":[],"fullName":"getChatMembersByUser(userId: string): Promise<ChatMember[]> should return empty array if prisma error occurs","status":"passed","title":"should return empty array if prisma error occurs"},{"ancestorTitles":["getChatMembersByChat(chatId: string): Promise<ChatMember[] | null>"],"duration":1,"failureMessages":[],"fullName":"getChatMembersByChat(chatId: string): Promise<ChatMember[] | null> should return ChatMembers successfully","status":"passed","title":"should return ChatMembers successfully"},{"ancestorTitles":["getChatMembersByChat(chatId: string): Promise<ChatMember[] | null>"],"duration":1,"failureMessages":[],"fullName":"getChatMembersByChat(chatId: string): Promise<ChatMember[] | null> should return empty array if no ChatMember exists","status":"passed","title":"should return empty array if no ChatMember exists"},{"ancestorTitles":["getChatMembersByChat(chatId: string): Promise<ChatMember[] | null>"],"duration":1,"failureMessages":[],"fullName":"getChatMembersByChat(chatId: string): Promise<ChatMember[] | null> should return empty array if chatId is empty","status":"passed","title":"should return empty array if chatId is empty"},{"ancestorTitles":["getChatMembersByChat(chatId: string): Promise<ChatMember[] | null>"],"duration":1,"failureMessages":[],"fullName":"getChatMembersByChat(chatId: string): Promise<ChatMember[] | null> should return empty array if prisma error occurs","status":"passed","title":"should return empty array if prisma error occurs"},{"ancestorTitles":["getChatMember(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"getChatMember(userId: string, chatId: string): Promise<ChatMember | null> should return a ChatMember successfully","status":"passed","title":"should return a ChatMember successfully"},{"ancestorTitles":["getChatMember(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"getChatMember(userId: string, chatId: string): Promise<ChatMember | null> should return null if no ChatMember exists","status":"passed","title":"should return null if no ChatMember exists"},{"ancestorTitles":["getChatMember(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":2,"failureMessages":[],"fullName":"getChatMember(userId: string, chatId: string): Promise<ChatMember | null> should return null if userId is empty","status":"passed","title":"should return null if userId is empty"},{"ancestorTitles":["getChatMember(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"getChatMember(userId: string, chatId: string): Promise<ChatMember | null> should return null if chatId is empty","status":"passed","title":"should return null if chatId is empty"},{"ancestorTitles":["getChatMember(userId: string, chatId: string): Promise<ChatMember | null>"],"duration":1,"failureMessages":[],"fullName":"getChatMember(userId: string, chatId: string): Promise<ChatMember | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"}]},{"numFailingTests":0,"numPassingTests":12,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740351706261,"runtime":5796,"slow":true,"start":1740351700465},"testFilePath":"C:\\Users\\gergo\\Downloads\\SafeChat\\backend\\__tests__\\db\\user.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["createUser(username: string, password: string): Promise<User | null>"],"duration":26,"failureMessages":[],"fullName":"createUser(username: string, password: string): Promise<User | null> should create a User successfully","status":"passed","title":"should create a User successfully"},{"ancestorTitles":["createUser(username: string, password: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"createUser(username: string, password: string): Promise<User | null> should return null if username is empty","status":"passed","title":"should return null if username is empty"},{"ancestorTitles":["createUser(username: string, password: string): Promise<User | null>"],"duration":2,"failureMessages":[],"fullName":"createUser(username: string, password: string): Promise<User | null> should return null if password is empty","status":"passed","title":"should return null if password is empty"},{"ancestorTitles":["createUser(username: string, password: string): Promise<User | null>"],"duration":2,"failureMessages":[],"fullName":"createUser(username: string, password: string): Promise<User | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"},{"ancestorTitles":["findUserByName(username: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"findUserByName(username: string): Promise<User | null> should return a User successfully","status":"passed","title":"should return a User successfully"},{"ancestorTitles":["findUserByName(username: string): Promise<User | null>"],"duration":0,"failureMessages":[],"fullName":"findUserByName(username: string): Promise<User | null> should return null if username is empty","status":"passed","title":"should return null if username is empty"},{"ancestorTitles":["findUserByName(username: string): Promise<User | null>"],"duration":0,"failureMessages":[],"fullName":"findUserByName(username: string): Promise<User | null> should return null if user does not exist","status":"passed","title":"should return null if user does not exist"},{"ancestorTitles":["findUserByName(username: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"findUserByName(username: string): Promise<User | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"},{"ancestorTitles":["findUserById(userId: string): Promise<User | null>"],"duration":2,"failureMessages":[],"fullName":"findUserById(userId: string): Promise<User | null> should return a User successfully","status":"passed","title":"should return a User successfully"},{"ancestorTitles":["findUserById(userId: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"findUserById(userId: string): Promise<User | null> should return null if id is empty","status":"passed","title":"should return null if id is empty"},{"ancestorTitles":["findUserById(userId: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"findUserById(userId: string): Promise<User | null> should return null if user does not exist","status":"passed","title":"should return null if user does not exist"},{"ancestorTitles":["findUserById(userId: string): Promise<User | null>"],"duration":1,"failureMessages":[],"fullName":"findUserById(userId: string): Promise<User | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"}]},{"numFailingTests":0,"numPassingTests":5,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740351706332,"runtime":5854,"slow":true,"start":1740351700478},"testFilePath":"C:\\Users\\gergo\\Downloads\\SafeChat\\backend\\__tests__\\db\\message.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":18,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should create a Message successfully","status":"passed","title":"should create a Message successfully"},{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":1,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should return null if chatId is empty","status":"passed","title":"should return null if chatId is empty"},{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":1,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should return null if userId is empty","status":"passed","title":"should return null if userId is empty"},{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":1,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should return null if content is empty","status":"passed","title":"should return null if content is empty"},{"ancestorTitles":["createMessage(chatId: string, userId: string, content: string): Promise<Message | null>"],"duration":3,"failureMessages":[],"fullName":"createMessage(chatId: string, userId: string, content: string): Promise<Message | null> should return null if prisma error occurs","status":"passed","title":"should return null if prisma error occurs"}]},{"numFailingTests":0,"numPassingTests":9,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740351706764,"runtime":6325,"slow":true,"start":1740351700439},"testFilePath":"C:\\Users\\gergo\\Downloads\\SafeChat\\backend\\__tests__\\http\\auth.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["POST /auth/register"],"duration":45,"failureMessages":[],"fullName":"POST /auth/register 201 Success","status":"passed","title":"201 Success"},{"ancestorTitles":["POST /auth/register"],"duration":5,"failureMessages":[],"fullName":"POST /auth/register 400 Missing required fields","status":"passed","title":"400 Missing required fields"},{"ancestorTitles":["POST /auth/register"],"duration":6,"failureMessages":[],"fullName":"POST /auth/register 400 User with username already exists","status":"passed","title":"400 User with username already exists"},{"ancestorTitles":["POST /auth/register"],"duration":5,"failureMessages":[],"fullName":"POST /auth/register 500 Server error (caused by prisma error)","status":"passed","title":"500 Server error (caused by prisma error)"},{"ancestorTitles":["POST /auth/login"],"duration":6,"failureMessages":[],"fullName":"POST /auth/login 201 Success","status":"passed","title":"201 Success"},{"ancestorTitles":["POST /auth/login"],"duration":4,"failureMessages":[],"fullName":"POST /auth/login 400 Missing required fields","status":"passed","title":"400 Missing required fields"},{"ancestorTitles":["POST /auth/login"],"duration":4,"failureMessages":[],"fullName":"POST /auth/login 400 Invalid credentials (Invalid username)","status":"passed","title":"400 Invalid credentials (Invalid username)"},{"ancestorTitles":["POST /auth/login"],"duration":4,"failureMessages":[],"fullName":"POST /auth/login 400 Invalid credentials (Invalid password)","status":"passed","title":"400 Invalid credentials (Invalid password)"},{"ancestorTitles":["POST /auth/refresh"],"duration":7,"failureMessages":[],"fullName":"POST /auth/refresh 200 Success","status":"passed","title":"200 Success"}]},{"numFailingTests":0,"numPassingTests":9,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1740351707507,"runtime":7005,"slow":true,"start":1740351700502},"testFilePath":"C:\\Users\\gergo\\Downloads\\SafeChat\\backend\\__tests__\\http\\middlewares.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["extractUserFromTokenMiddleWare"],"duration":9,"failureMessages":[],"fullName":"extractUserFromTokenMiddleWare Call next() if token is valid","status":"passed","title":"Call next() if token is valid"},{"ancestorTitles":["extractUserFromTokenMiddleWare"],"duration":0,"failureMessages":[],"fullName":"extractUserFromTokenMiddleWare 401 No token provided","status":"passed","title":"401 No token provided"},{"ancestorTitles":["extractUserFromTokenMiddleWare"],"duration":1,"failureMessages":[],"fullName":"extractUserFromTokenMiddleWare 401 Invalid or expired token (Expired token)","status":"passed","title":"401 Invalid or expired token (Expired token)"},{"ancestorTitles":["extractUserFromTokenMiddleWare"],"duration":1,"failureMessages":[],"fullName":"extractUserFromTokenMiddleWare 401 Invalid or expired token (Invalid token)","status":"passed","title":"401 Invalid or expired token (Invalid token)"},{"ancestorTitles":["extractUserFromTokenMiddleWare"],"duration":1,"failureMessages":[],"fullName":"extractUserFromTokenMiddleWare 401 Invalid or expired token (User with UserId not found)","status":"passed","title":"401 Invalid or expired token (User with UserId not found)"},{"ancestorTitles":["validateRequiredFields"],"duration":0,"failureMessages":[],"fullName":"validateRequiredFields Call next() if fields are present","status":"passed","title":"Call next() if fields are present"},{"ancestorTitles":["validateRequiredFields"],"duration":1,"failureMessages":[],"fullName":"validateRequiredFields 400 Missing required fields (one missing)","status":"passed","title":"400 Missing required fields (one missing)"},{"ancestorTitles":["validateRequiredFields"],"duration":0,"failureMessages":[],"fullName":"validateRequiredFields 400 Missing required fields (all missing)","status":"passed","title":"400 Missing required fields (all missing)"},{"ancestorTitles":["validateRequiredFields"],"duration":1,"failureMessages":[],"fullName":"validateRequiredFields Call next() if required fields is empty","status":"passed","title":"Call next() if required fields is empty"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":[],"coverageDirectory":"C:\\Users\\gergo\\Downloads\\SafeChat\\backend\\coverage","coverageProvider":"babel","coverageReporters":["json","text","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":7,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["C:\\Users\\gergo\\Downloads\\SafeChat\\backend\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"./__tests__/report","filename":"index.html"}]],"rootDir":"C:\\Users\\gergo\\Downloads\\SafeChat\\backend","runTestsByPath":false,"seed":1620656982,"silent":true,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPattern":"","testSequencer":"C:\\Users\\gergo\\Downloads\\SafeChat\\backend\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"verbose":true,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1740351707590,"_reporterOptions":{"publicPath":"./__tests__/report","filename":"index.html","expand":false,"pageTitle":"","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":false,"stripSkippedTest":false},"logInfoMapping":{},"attachInfos":{}})